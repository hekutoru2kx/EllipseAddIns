//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TnsNamesLexer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace erl.Oracle.TnsNames.ANTLR {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
public partial class TnsNamesLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WORD=1, LEFT_PAREN=2, RIGHT_PAREN=3, EQUALS=4, COMMA=5, SINGLE_QUOTE=6, 
		DOUBLE_QUOTE=7, COMMENT=8, WHITESPACE=9, NEWLINE=10;
	public const int
		A=1, B=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "A", "B"
	};

	public static readonly string[] ruleNames = {
		"WORD", "LEFT_PAREN", "RIGHT_PAREN", "EQUALS", "COMMA", "SINGLE_QUOTE", 
		"DOUBLE_QUOTE", "COMMENT", "WHITESPACE", "NEWLINE", "A1", "A2", "B1", 
		"B2"
	};


	public TnsNamesLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TnsNamesLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'='", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WORD", "LEFT_PAREN", "RIGHT_PAREN", "EQUALS", "COMMA", "SINGLE_QUOTE", 
		"DOUBLE_QUOTE", "COMMENT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TnsNamesLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TnsNamesLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', '\x66', '\b', '\x1', '\b', '\x1', '\b', '\x1', 
		'\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', 
		'\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', 
		'\t', '\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', 
		'\t', '\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', 
		'\t', '\r', '\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '%', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '&', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', ';', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '>', '\v', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x5', 
		'\v', 'G', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\a', '\f', 'N', '\n', '\f', '\f', '\f', '\xE', '\f', 'Q', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\a', '\xE', '[', '\n', 
		'\xE', '\f', '\xE', '\xE', '\xE', '^', '\v', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x2', '\x2', '\x10', '\x5', '\x3', '\a', '\x4', '\t', '\x5', '\v', 
		'\x6', '\r', '\a', '\xF', '\b', '\x11', '\t', '\x13', '\n', '\x15', '\v', 
		'\x17', '\f', '\x19', '\x2', '\x1B', '\x2', '\x1D', '\x2', '\x1F', '\x2', 
		'\x5', '\x2', '\x3', '\x4', '\a', '\t', '\x2', '#', '#', '&', '(', ',', 
		'-', '/', '>', '@', '\\', '\x61', '\x61', '\x63', '|', '\x3', '\x2', '\f', 
		'\f', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x3', '\x2', ')', ')', '\x3', 
		'\x2', '$', '$', '\x2', 'i', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x19', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x5', '$', '\x3', '\x2', '\x2', 
		'\x2', '\a', '(', '\x3', '\x2', '\x2', '\x2', '\t', '*', '\x3', '\x2', 
		'\x2', '\x2', '\v', ',', '\x3', '\x2', '\x2', '\x2', '\r', '.', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x30', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x13', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x41', '\x3', '\x2', '\x2', '\x2', '\x17', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x19', 'O', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x1D', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x61', '\x3', '\x2', '\x2', '\x2', '!', '%', '\t', '\x2', '\x2', 
		'\x2', '\"', '#', '\a', '^', '\x2', '\x2', '#', '%', '\v', '\x2', '\x2', 
		'\x2', '$', '!', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\a', '*', '\x2', '\x2', ')', '\b', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '+', '\x2', '\x2', '+', '\n', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\a', '?', '\x2', '\x2', '-', '\f', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '.', '\x2', '\x2', '/', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', ')', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\b', '\a', '\x2', 
		'\x2', '\x33', '\x10', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', 
		'$', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\b', '\b', '\x3', '\x2', '\x37', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '<', '\a', '%', '\x2', '\x2', '\x39', ';', '\n', '\x3', 
		'\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\b', '\t', '\x4', '\x2', '@', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\t', '\x4', '\x2', '\x2', 
		'\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\b', '\n', 
		'\x4', '\x2', '\x44', '\x16', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', 
		'\a', '\xF', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\a', '\f', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\b', '\v', '\x4', '\x2', 'K', '\x18', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'N', '\n', '\x5', '\x2', '\x2', 'M', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\b', '\f', 
		'\x5', '\x2', 'S', '\x1A', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 
		')', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\b', 
		'\r', '\x6', '\x2', 'W', 'X', '\b', '\r', '\a', '\x2', 'X', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '[', '\n', '\x6', '\x2', '\x2', 'Z', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'_', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\b', '\xE', '\x5', '\x2', '`', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\a', '$', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\b', '\xF', '\x6', '\x2', '\x64', 
		'\x65', '\b', '\xF', '\b', '\x2', '\x65', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x2', '\x3', '\x4', '$', '&', '<', '\x46', 'O', '\\', '\t', '\a', 
		'\x3', '\x2', '\a', '\x4', '\x2', '\b', '\x2', '\x2', '\t', '\x3', '\x2', 
		'\x6', '\x2', '\x2', '\t', '\b', '\x2', '\t', '\t', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace erl.Oracle.TnsNames.ANTLR
