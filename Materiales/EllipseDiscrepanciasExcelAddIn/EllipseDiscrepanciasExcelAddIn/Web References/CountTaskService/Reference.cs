//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EllipseDiscrepanciasExcelAddIn.CountTaskService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CountTaskServiceHttpBinding", Namespace="http://counttask.m3140.service.ellipse.mincom.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BaseServiceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Base))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Attribute[]))]
    public partial class CountTaskService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback searchForCountedOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleGetStockUnderCountFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAllConfirmedOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback notCountedOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleFinaliseOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleSetAllConfirmedOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchForUncountedInWarehouseOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchOperationCompleted;
        
        private System.Threading.SendOrPostCallback multiplePrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback raiseDiscrepancyOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleRaiseDiscrepancyOperationCompleted;
        
        private System.Threading.SendOrPostCallback createOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleNotCountedOperationCompleted;
        
        private System.Threading.SendOrPostCallback finaliseOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleAssignOperationCompleted;
        
        private System.Threading.SendOrPostCallback readOperationCompleted;
        
        private System.Threading.SendOrPostCallback reconcileOperationCompleted;
        
        private System.Threading.SendOrPostCallback printOperationCompleted;
        
        private System.Threading.SendOrPostCallback transferOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleReconcileOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStockUnderCountFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback recountOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchForUncountedOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignOperationCompleted;
        
        private System.Threading.SendOrPostCallback multipleRecountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CountTaskService() {
            this.Url = global::EllipseDiscrepanciasExcelAddIn.Properties.Settings.Default.EllipseDiscrepanciasExcelAddIn_CountTaskService_CountTaskService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event searchForCountedCompletedEventHandler searchForCountedCompleted;
        
        /// <remarks/>
        public event multipleGetStockUnderCountFlagCompletedEventHandler multipleGetStockUnderCountFlagCompleted;
        
        /// <remarks/>
        public event setAllConfirmedCompletedEventHandler setAllConfirmedCompleted;
        
        /// <remarks/>
        public event multipleDeleteCompletedEventHandler multipleDeleteCompleted;
        
        /// <remarks/>
        public event notCountedCompletedEventHandler notCountedCompleted;
        
        /// <remarks/>
        public event updateCompletedEventHandler updateCompleted;
        
        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;
        
        /// <remarks/>
        public event multipleFinaliseCompletedEventHandler multipleFinaliseCompleted;
        
        /// <remarks/>
        public event multipleSetAllConfirmedCompletedEventHandler multipleSetAllConfirmedCompleted;
        
        /// <remarks/>
        public event searchForUncountedInWarehouseCompletedEventHandler searchForUncountedInWarehouseCompleted;
        
        /// <remarks/>
        public event searchCompletedEventHandler searchCompleted;
        
        /// <remarks/>
        public event multiplePrintCompletedEventHandler multiplePrintCompleted;
        
        /// <remarks/>
        public event multipleUpdateCompletedEventHandler multipleUpdateCompleted;
        
        /// <remarks/>
        public event raiseDiscrepancyCompletedEventHandler raiseDiscrepancyCompleted;
        
        /// <remarks/>
        public event multipleRaiseDiscrepancyCompletedEventHandler multipleRaiseDiscrepancyCompleted;
        
        /// <remarks/>
        public event createCompletedEventHandler createCompleted;
        
        /// <remarks/>
        public event multipleNotCountedCompletedEventHandler multipleNotCountedCompleted;
        
        /// <remarks/>
        public event finaliseCompletedEventHandler finaliseCompleted;
        
        /// <remarks/>
        public event multipleAssignCompletedEventHandler multipleAssignCompleted;
        
        /// <remarks/>
        public event readCompletedEventHandler readCompleted;
        
        /// <remarks/>
        public event reconcileCompletedEventHandler reconcileCompleted;
        
        /// <remarks/>
        public event printCompletedEventHandler printCompleted;
        
        /// <remarks/>
        public event transferCompletedEventHandler transferCompleted;
        
        /// <remarks/>
        public event multipleReconcileCompletedEventHandler multipleReconcileCompleted;
        
        /// <remarks/>
        public event multipleTransferCompletedEventHandler multipleTransferCompleted;
        
        /// <remarks/>
        public event getStockUnderCountFlagCompletedEventHandler getStockUnderCountFlagCompleted;
        
        /// <remarks/>
        public event multipleReadCompletedEventHandler multipleReadCompleted;
        
        /// <remarks/>
        public event recountCompletedEventHandler recountCompleted;
        
        /// <remarks/>
        public event searchForUncountedCompletedEventHandler searchForUncountedCompleted;
        
        /// <remarks/>
        public event multipleCreateCompletedEventHandler multipleCreateCompleted;
        
        /// <remarks/>
        public event assignCompletedEventHandler assignCompleted;
        
        /// <remarks/>
        public event multipleRecountCompletedEventHandler multipleRecountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] searchForCounted([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskSearchParam searchParams, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO restart) {
            object[] results = this.Invoke("searchForCounted", new object[] {
                        context,
                        searchParams,
                        restart});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void searchForCountedAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskDTO restart) {
            this.searchForCountedAsync(context, searchParams, restart, null);
        }
        
        /// <remarks/>
        public void searchForCountedAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskDTO restart, object userState) {
            if ((this.searchForCountedOperationCompleted == null)) {
                this.searchForCountedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchForCountedOperationCompleted);
            }
            this.InvokeAsync("searchForCounted", new object[] {
                        context,
                        searchParams,
                        restart}, this.searchForCountedOperationCompleted, userState);
        }
        
        private void OnsearchForCountedOperationCompleted(object arg) {
            if ((this.searchForCountedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchForCountedCompleted(this, new searchForCountedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public StockUnderCountServiceResult[] multipleGetStockUnderCountFlag([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] StockUnderCountDTO[] inputDtos) {
            object[] results = this.Invoke("multipleGetStockUnderCountFlag", new object[] {
                        context,
                        inputDtos});
            return ((StockUnderCountServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleGetStockUnderCountFlagAsync(OperationContext context, StockUnderCountDTO[] inputDtos) {
            this.multipleGetStockUnderCountFlagAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleGetStockUnderCountFlagAsync(OperationContext context, StockUnderCountDTO[] inputDtos, object userState) {
            if ((this.multipleGetStockUnderCountFlagOperationCompleted == null)) {
                this.multipleGetStockUnderCountFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleGetStockUnderCountFlagOperationCompleted);
            }
            this.InvokeAsync("multipleGetStockUnderCountFlag", new object[] {
                        context,
                        inputDtos}, this.multipleGetStockUnderCountFlagOperationCompleted, userState);
        }
        
        private void OnmultipleGetStockUnderCountFlagOperationCompleted(object arg) {
            if ((this.multipleGetStockUnderCountFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleGetStockUnderCountFlagCompleted(this, new multipleGetStockUnderCountFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult setAllConfirmed([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("setAllConfirmed", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void setAllConfirmedAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.setAllConfirmedAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void setAllConfirmedAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.setAllConfirmedOperationCompleted == null)) {
                this.setAllConfirmedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAllConfirmedOperationCompleted);
            }
            this.InvokeAsync("setAllConfirmed", new object[] {
                        context,
                        serviceDTO}, this.setAllConfirmedOperationCompleted, userState);
        }
        
        private void OnsetAllConfirmedOperationCompleted(object arg) {
            if ((this.setAllConfirmedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAllConfirmedCompleted(this, new setAllConfirmedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleDelete([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleDelete", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleDeleteAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleDeleteAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleDeleteAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleDeleteOperationCompleted == null)) {
                this.multipleDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleDeleteOperationCompleted);
            }
            this.InvokeAsync("multipleDelete", new object[] {
                        context,
                        inputDtos}, this.multipleDeleteOperationCompleted, userState);
        }
        
        private void OnmultipleDeleteOperationCompleted(object arg) {
            if ((this.multipleDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleDeleteCompleted(this, new multipleDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult notCounted([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("notCounted", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void notCountedAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.notCountedAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void notCountedAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.notCountedOperationCompleted == null)) {
                this.notCountedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnotCountedOperationCompleted);
            }
            this.InvokeAsync("notCounted", new object[] {
                        context,
                        serviceDTO}, this.notCountedOperationCompleted, userState);
        }
        
        private void OnnotCountedOperationCompleted(object arg) {
            if ((this.notCountedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.notCountedCompleted(this, new notCountedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult update([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("update", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void updateAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.updateAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void updateAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.updateOperationCompleted == null)) {
                this.updateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOperationCompleted);
            }
            this.InvokeAsync("update", new object[] {
                        context,
                        serviceDTO}, this.updateOperationCompleted, userState);
        }
        
        private void OnupdateOperationCompleted(object arg) {
            if ((this.updateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCompleted(this, new updateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult delete([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("delete", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void deleteAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.deleteAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void deleteAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.deleteOperationCompleted == null)) {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                        context,
                        serviceDTO}, this.deleteOperationCompleted, userState);
        }
        
        private void OndeleteOperationCompleted(object arg) {
            if ((this.deleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new deleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleFinalise([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleFinalise", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleFinaliseAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleFinaliseAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleFinaliseAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleFinaliseOperationCompleted == null)) {
                this.multipleFinaliseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleFinaliseOperationCompleted);
            }
            this.InvokeAsync("multipleFinalise", new object[] {
                        context,
                        inputDtos}, this.multipleFinaliseOperationCompleted, userState);
        }
        
        private void OnmultipleFinaliseOperationCompleted(object arg) {
            if ((this.multipleFinaliseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleFinaliseCompleted(this, new multipleFinaliseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleSetAllConfirmed([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleSetAllConfirmed", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleSetAllConfirmedAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleSetAllConfirmedAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleSetAllConfirmedAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleSetAllConfirmedOperationCompleted == null)) {
                this.multipleSetAllConfirmedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleSetAllConfirmedOperationCompleted);
            }
            this.InvokeAsync("multipleSetAllConfirmed", new object[] {
                        context,
                        inputDtos}, this.multipleSetAllConfirmedOperationCompleted, userState);
        }
        
        private void OnmultipleSetAllConfirmedOperationCompleted(object arg) {
            if ((this.multipleSetAllConfirmedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleSetAllConfirmedCompleted(this, new multipleSetAllConfirmedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskExtendedServiceResult[] searchForUncountedInWarehouse([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskSearchParam searchParams, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskExtendedDTO restart) {
            object[] results = this.Invoke("searchForUncountedInWarehouse", new object[] {
                        context,
                        searchParams,
                        restart});
            return ((CountTaskExtendedServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void searchForUncountedInWarehouseAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskExtendedDTO restart) {
            this.searchForUncountedInWarehouseAsync(context, searchParams, restart, null);
        }
        
        /// <remarks/>
        public void searchForUncountedInWarehouseAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskExtendedDTO restart, object userState) {
            if ((this.searchForUncountedInWarehouseOperationCompleted == null)) {
                this.searchForUncountedInWarehouseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchForUncountedInWarehouseOperationCompleted);
            }
            this.InvokeAsync("searchForUncountedInWarehouse", new object[] {
                        context,
                        searchParams,
                        restart}, this.searchForUncountedInWarehouseOperationCompleted, userState);
        }
        
        private void OnsearchForUncountedInWarehouseOperationCompleted(object arg) {
            if ((this.searchForUncountedInWarehouseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchForUncountedInWarehouseCompleted(this, new searchForUncountedInWarehouseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] search([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskSearchParam searchParams, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO restart) {
            object[] results = this.Invoke("search", new object[] {
                        context,
                        searchParams,
                        restart});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void searchAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskDTO restart) {
            this.searchAsync(context, searchParams, restart, null);
        }
        
        /// <remarks/>
        public void searchAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskDTO restart, object userState) {
            if ((this.searchOperationCompleted == null)) {
                this.searchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchOperationCompleted);
            }
            this.InvokeAsync("search", new object[] {
                        context,
                        searchParams,
                        restart}, this.searchOperationCompleted, userState);
        }
        
        private void OnsearchOperationCompleted(object arg) {
            if ((this.searchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchCompleted(this, new searchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multiplePrint([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multiplePrint", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multiplePrintAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multiplePrintAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multiplePrintAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multiplePrintOperationCompleted == null)) {
                this.multiplePrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultiplePrintOperationCompleted);
            }
            this.InvokeAsync("multiplePrint", new object[] {
                        context,
                        inputDtos}, this.multiplePrintOperationCompleted, userState);
        }
        
        private void OnmultiplePrintOperationCompleted(object arg) {
            if ((this.multiplePrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multiplePrintCompleted(this, new multiplePrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleUpdate", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleUpdateAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleUpdateAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleUpdateAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleUpdateOperationCompleted == null)) {
                this.multipleUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleUpdateOperationCompleted);
            }
            this.InvokeAsync("multipleUpdate", new object[] {
                        context,
                        inputDtos}, this.multipleUpdateOperationCompleted, userState);
        }
        
        private void OnmultipleUpdateOperationCompleted(object arg) {
            if ((this.multipleUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleUpdateCompleted(this, new multipleUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult raiseDiscrepancy([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("raiseDiscrepancy", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void raiseDiscrepancyAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.raiseDiscrepancyAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void raiseDiscrepancyAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.raiseDiscrepancyOperationCompleted == null)) {
                this.raiseDiscrepancyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnraiseDiscrepancyOperationCompleted);
            }
            this.InvokeAsync("raiseDiscrepancy", new object[] {
                        context,
                        serviceDTO}, this.raiseDiscrepancyOperationCompleted, userState);
        }
        
        private void OnraiseDiscrepancyOperationCompleted(object arg) {
            if ((this.raiseDiscrepancyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.raiseDiscrepancyCompleted(this, new raiseDiscrepancyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleRaiseDiscrepancy([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleRaiseDiscrepancy", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleRaiseDiscrepancyAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleRaiseDiscrepancyAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleRaiseDiscrepancyAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleRaiseDiscrepancyOperationCompleted == null)) {
                this.multipleRaiseDiscrepancyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleRaiseDiscrepancyOperationCompleted);
            }
            this.InvokeAsync("multipleRaiseDiscrepancy", new object[] {
                        context,
                        inputDtos}, this.multipleRaiseDiscrepancyOperationCompleted, userState);
        }
        
        private void OnmultipleRaiseDiscrepancyOperationCompleted(object arg) {
            if ((this.multipleRaiseDiscrepancyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleRaiseDiscrepancyCompleted(this, new multipleRaiseDiscrepancyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult create([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("create", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void createAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.createAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void createAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.createOperationCompleted == null)) {
                this.createOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateOperationCompleted);
            }
            this.InvokeAsync("create", new object[] {
                        context,
                        serviceDTO}, this.createOperationCompleted, userState);
        }
        
        private void OncreateOperationCompleted(object arg) {
            if ((this.createCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompleted(this, new createCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleNotCounted([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleNotCounted", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleNotCountedAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleNotCountedAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleNotCountedAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleNotCountedOperationCompleted == null)) {
                this.multipleNotCountedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleNotCountedOperationCompleted);
            }
            this.InvokeAsync("multipleNotCounted", new object[] {
                        context,
                        inputDtos}, this.multipleNotCountedOperationCompleted, userState);
        }
        
        private void OnmultipleNotCountedOperationCompleted(object arg) {
            if ((this.multipleNotCountedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleNotCountedCompleted(this, new multipleNotCountedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult finalise([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("finalise", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void finaliseAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.finaliseAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void finaliseAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.finaliseOperationCompleted == null)) {
                this.finaliseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfinaliseOperationCompleted);
            }
            this.InvokeAsync("finalise", new object[] {
                        context,
                        serviceDTO}, this.finaliseOperationCompleted, userState);
        }
        
        private void OnfinaliseOperationCompleted(object arg) {
            if ((this.finaliseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.finaliseCompleted(this, new finaliseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleAssign([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleAssign", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleAssignAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleAssignAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleAssignAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleAssignOperationCompleted == null)) {
                this.multipleAssignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleAssignOperationCompleted);
            }
            this.InvokeAsync("multipleAssign", new object[] {
                        context,
                        inputDtos}, this.multipleAssignOperationCompleted, userState);
        }
        
        private void OnmultipleAssignOperationCompleted(object arg) {
            if ((this.multipleAssignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleAssignCompleted(this, new multipleAssignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult read([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("read", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void readAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.readAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void readAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.readOperationCompleted == null)) {
                this.readOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreadOperationCompleted);
            }
            this.InvokeAsync("read", new object[] {
                        context,
                        serviceDTO}, this.readOperationCompleted, userState);
        }
        
        private void OnreadOperationCompleted(object arg) {
            if ((this.readCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.readCompleted(this, new readCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult reconcile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("reconcile", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void reconcileAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.reconcileAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void reconcileAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.reconcileOperationCompleted == null)) {
                this.reconcileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreconcileOperationCompleted);
            }
            this.InvokeAsync("reconcile", new object[] {
                        context,
                        serviceDTO}, this.reconcileOperationCompleted, userState);
        }
        
        private void OnreconcileOperationCompleted(object arg) {
            if ((this.reconcileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reconcileCompleted(this, new reconcileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult print([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("print", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void printAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.printAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void printAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.printOperationCompleted == null)) {
                this.printOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprintOperationCompleted);
            }
            this.InvokeAsync("print", new object[] {
                        context,
                        serviceDTO}, this.printOperationCompleted, userState);
        }
        
        private void OnprintOperationCompleted(object arg) {
            if ((this.printCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.printCompleted(this, new printCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult transfer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("transfer", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void transferAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.transferAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void transferAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.transferOperationCompleted == null)) {
                this.transferOperationCompleted = new System.Threading.SendOrPostCallback(this.OntransferOperationCompleted);
            }
            this.InvokeAsync("transfer", new object[] {
                        context,
                        serviceDTO}, this.transferOperationCompleted, userState);
        }
        
        private void OntransferOperationCompleted(object arg) {
            if ((this.transferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.transferCompleted(this, new transferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleReconcile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleReconcile", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleReconcileAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleReconcileAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleReconcileAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleReconcileOperationCompleted == null)) {
                this.multipleReconcileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleReconcileOperationCompleted);
            }
            this.InvokeAsync("multipleReconcile", new object[] {
                        context,
                        inputDtos}, this.multipleReconcileOperationCompleted, userState);
        }
        
        private void OnmultipleReconcileOperationCompleted(object arg) {
            if ((this.multipleReconcileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleReconcileCompleted(this, new multipleReconcileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleTransfer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleTransfer", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleTransferAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleTransferAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleTransferAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleTransferOperationCompleted == null)) {
                this.multipleTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleTransferOperationCompleted);
            }
            this.InvokeAsync("multipleTransfer", new object[] {
                        context,
                        inputDtos}, this.multipleTransferOperationCompleted, userState);
        }
        
        private void OnmultipleTransferOperationCompleted(object arg) {
            if ((this.multipleTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleTransferCompleted(this, new multipleTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public StockUnderCountServiceResult getStockUnderCountFlag([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] StockUnderCountDTO serviceDTO) {
            object[] results = this.Invoke("getStockUnderCountFlag", new object[] {
                        context,
                        serviceDTO});
            return ((StockUnderCountServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void getStockUnderCountFlagAsync(OperationContext context, StockUnderCountDTO serviceDTO) {
            this.getStockUnderCountFlagAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void getStockUnderCountFlagAsync(OperationContext context, StockUnderCountDTO serviceDTO, object userState) {
            if ((this.getStockUnderCountFlagOperationCompleted == null)) {
                this.getStockUnderCountFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStockUnderCountFlagOperationCompleted);
            }
            this.InvokeAsync("getStockUnderCountFlag", new object[] {
                        context,
                        serviceDTO}, this.getStockUnderCountFlagOperationCompleted, userState);
        }
        
        private void OngetStockUnderCountFlagOperationCompleted(object arg) {
            if ((this.getStockUnderCountFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStockUnderCountFlagCompleted(this, new getStockUnderCountFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleRead([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleRead", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleReadAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleReadAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleReadAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleReadOperationCompleted == null)) {
                this.multipleReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleReadOperationCompleted);
            }
            this.InvokeAsync("multipleRead", new object[] {
                        context,
                        inputDtos}, this.multipleReadOperationCompleted, userState);
        }
        
        private void OnmultipleReadOperationCompleted(object arg) {
            if ((this.multipleReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleReadCompleted(this, new multipleReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult recount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("recount", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void recountAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.recountAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void recountAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.recountOperationCompleted == null)) {
                this.recountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecountOperationCompleted);
            }
            this.InvokeAsync("recount", new object[] {
                        context,
                        serviceDTO}, this.recountOperationCompleted, userState);
        }
        
        private void OnrecountOperationCompleted(object arg) {
            if ((this.recountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recountCompleted(this, new recountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] searchForUncounted([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskSearchParam searchParams, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO restart) {
            object[] results = this.Invoke("searchForUncounted", new object[] {
                        context,
                        searchParams,
                        restart});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void searchForUncountedAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskDTO restart) {
            this.searchForUncountedAsync(context, searchParams, restart, null);
        }
        
        /// <remarks/>
        public void searchForUncountedAsync(OperationContext context, CountTaskSearchParam searchParams, CountTaskDTO restart, object userState) {
            if ((this.searchForUncountedOperationCompleted == null)) {
                this.searchForUncountedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchForUncountedOperationCompleted);
            }
            this.InvokeAsync("searchForUncounted", new object[] {
                        context,
                        searchParams,
                        restart}, this.searchForUncountedOperationCompleted, userState);
        }
        
        private void OnsearchForUncountedOperationCompleted(object arg) {
            if ((this.searchForUncountedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchForUncountedCompleted(this, new searchForUncountedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleCreate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleCreate", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleCreateAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleCreateAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleCreateAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleCreateOperationCompleted == null)) {
                this.multipleCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleCreateOperationCompleted);
            }
            this.InvokeAsync("multipleCreate", new object[] {
                        context,
                        inputDtos}, this.multipleCreateOperationCompleted, userState);
        }
        
        private void OnmultipleCreateOperationCompleted(object arg) {
            if ((this.multipleCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleCreateCompleted(this, new multipleCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public CountTaskServiceResult assign([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CountTaskDTO serviceDTO) {
            object[] results = this.Invoke("assign", new object[] {
                        context,
                        serviceDTO});
            return ((CountTaskServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void assignAsync(OperationContext context, CountTaskDTO serviceDTO) {
            this.assignAsync(context, serviceDTO, null);
        }
        
        /// <remarks/>
        public void assignAsync(OperationContext context, CountTaskDTO serviceDTO, object userState) {
            if ((this.assignOperationCompleted == null)) {
                this.assignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignOperationCompleted);
            }
            this.InvokeAsync("assign", new object[] {
                        context,
                        serviceDTO}, this.assignOperationCompleted, userState);
        }
        
        private void OnassignOperationCompleted(object arg) {
            if ((this.assignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignCompleted(this, new assignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://counttask.m3140.service.ellipse.mincom.com", ResponseNamespace="http://counttask.m3140.service.ellipse.mincom.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("out", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
        public CountTaskServiceResult[] multipleRecount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] OperationContext context, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")] CountTaskDTO[] inputDtos) {
            object[] results = this.Invoke("multipleRecount", new object[] {
                        context,
                        inputDtos});
            return ((CountTaskServiceResult[])(results[0]));
        }
        
        /// <remarks/>
        public void multipleRecountAsync(OperationContext context, CountTaskDTO[] inputDtos) {
            this.multipleRecountAsync(context, inputDtos, null);
        }
        
        /// <remarks/>
        public void multipleRecountAsync(OperationContext context, CountTaskDTO[] inputDtos, object userState) {
            if ((this.multipleRecountOperationCompleted == null)) {
                this.multipleRecountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmultipleRecountOperationCompleted);
            }
            this.InvokeAsync("multipleRecount", new object[] {
                        context,
                        inputDtos}, this.multipleRecountOperationCompleted, userState);
        }
        
        private void OnmultipleRecountOperationCompleted(object arg) {
            if ((this.multipleRecountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.multipleRecountCompleted(this, new multipleRecountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://connectivity.service.ews.mincom.com")]
    public partial class OperationContext {
        
        private string applicationClientIdField;
        
        private string districtField;
        
        private bool eventDisableField;
        
        private bool eventDisableFieldSpecified;
        
        private int maxInstancesField;
        
        private bool maxInstancesFieldSpecified;
        
        private string positionField;
        
        private bool returnWarningsField;
        
        private bool returnWarningsFieldSpecified;
        
        private RunAs runAsField;
        
        private string tenantIdField;
        
        private bool traceField;
        
        private bool traceFieldSpecified;
        
        private string transactionField;
        
        /// <remarks/>
        public string applicationClientId {
            get {
                return this.applicationClientIdField;
            }
            set {
                this.applicationClientIdField = value;
            }
        }
        
        /// <remarks/>
        public string district {
            get {
                return this.districtField;
            }
            set {
                this.districtField = value;
            }
        }
        
        /// <remarks/>
        public bool eventDisable {
            get {
                return this.eventDisableField;
            }
            set {
                this.eventDisableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eventDisableSpecified {
            get {
                return this.eventDisableFieldSpecified;
            }
            set {
                this.eventDisableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int maxInstances {
            get {
                return this.maxInstancesField;
            }
            set {
                this.maxInstancesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxInstancesSpecified {
            get {
                return this.maxInstancesFieldSpecified;
            }
            set {
                this.maxInstancesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public bool returnWarnings {
            get {
                return this.returnWarningsField;
            }
            set {
                this.returnWarningsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool returnWarningsSpecified {
            get {
                return this.returnWarningsFieldSpecified;
            }
            set {
                this.returnWarningsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public RunAs runAs {
            get {
                return this.runAsField;
            }
            set {
                this.runAsField = value;
            }
        }
        
        /// <remarks/>
        public string tenantId {
            get {
                return this.tenantIdField;
            }
            set {
                this.tenantIdField = value;
            }
        }
        
        /// <remarks/>
        public bool trace {
            get {
                return this.traceField;
            }
            set {
                this.traceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool traceSpecified {
            get {
                return this.traceFieldSpecified;
            }
            set {
                this.traceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string transaction {
            get {
                return this.transactionField;
            }
            set {
                this.transactionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://connectivity.service.ews.mincom.com")]
    public partial class RunAs {
        
        private string districtField;
        
        private string positionField;
        
        private string userField;
        
        /// <remarks/>
        public string district {
            get {
                return this.districtField;
            }
            set {
                this.districtField = value;
            }
        }
        
        /// <remarks/>
        public string position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.ellipse.mincom.com")]
    public partial class ServiceRequiredAttributes {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskExtendedServiceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockUnderCountServiceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskServiceResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.ellipse.mincom.com")]
    public abstract partial class BaseServiceResult {
        
        private Error[] errorsField;
        
        private Message[] informationalMessagesField;
        
        private Warning[] warningsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://errors.ellipse.mincom.com")]
        public Error[] errors {
            get {
                return this.errorsField;
            }
            set {
                this.errorsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://errors.ellipse.mincom.com")]
        public Message[] informationalMessages {
            get {
                return this.informationalMessagesField;
            }
            set {
                this.informationalMessagesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://errors.ellipse.mincom.com")]
        public Warning[] warnings {
            get {
                return this.warningsField;
            }
            set {
                this.warningsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://errors.ellipse.mincom.com")]
    public partial class Error : Message {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Error))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Warning))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://errors.ellipse.mincom.com")]
    public partial class Message {
        
        private string fieldIdField;
        
        private int fieldIndexField;
        
        private bool fieldIndexFieldSpecified;
        
        private bool localisableField;
        
        private bool localisableFieldSpecified;
        
        private string messageIdField;
        
        private string messageInstanceField;
        
        private string messageTextField;
        
        private string parentInstanceField;
        
        private string userField;
        
        /// <remarks/>
        public string fieldId {
            get {
                return this.fieldIdField;
            }
            set {
                this.fieldIdField = value;
            }
        }
        
        /// <remarks/>
        public int fieldIndex {
            get {
                return this.fieldIndexField;
            }
            set {
                this.fieldIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fieldIndexSpecified {
            get {
                return this.fieldIndexFieldSpecified;
            }
            set {
                this.fieldIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool localisable {
            get {
                return this.localisableField;
            }
            set {
                this.localisableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool localisableSpecified {
            get {
                return this.localisableFieldSpecified;
            }
            set {
                this.localisableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string messageId {
            get {
                return this.messageIdField;
            }
            set {
                this.messageIdField = value;
            }
        }
        
        /// <remarks/>
        public string messageInstance {
            get {
                return this.messageInstanceField;
            }
            set {
                this.messageInstanceField = value;
            }
        }
        
        /// <remarks/>
        public string messageText {
            get {
                return this.messageTextField;
            }
            set {
                this.messageTextField = value;
            }
        }
        
        /// <remarks/>
        public string parentInstance {
            get {
                return this.parentInstanceField;
            }
            set {
                this.parentInstanceField = value;
            }
        }
        
        /// <remarks/>
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://errors.ellipse.mincom.com")]
    public partial class Warning : Message {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskExtendedServiceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockUnderCountServiceResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskServiceResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.ellipse.mincom.com")]
    public partial class ServiceResult : BaseServiceResult {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class CountTaskExtendedServiceResult : ServiceResult {
        
        private CountTaskExtendedDTO countTaskExtendedDTOField;
        
        /// <remarks/>
        public CountTaskExtendedDTO countTaskExtendedDTO {
            get {
                return this.countTaskExtendedDTOField;
            }
            set {
                this.countTaskExtendedDTOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class CountTaskExtendedDTO : CountTaskDTO {
        
        private string catalogueDescriptionField;
        
        private string countSheetTypeField;
        
        private string partNumberField;
        
        private string unitOfIssueField;
        
        /// <remarks/>
        public string catalogueDescription {
            get {
                return this.catalogueDescriptionField;
            }
            set {
                this.catalogueDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string countSheetType {
            get {
                return this.countSheetTypeField;
            }
            set {
                this.countSheetTypeField = value;
            }
        }
        
        /// <remarks/>
        public string partNumber {
            get {
                return this.partNumberField;
            }
            set {
                this.partNumberField = value;
            }
        }
        
        /// <remarks/>
        public string unitOfIssue {
            get {
                return this.unitOfIssueField;
            }
            set {
                this.unitOfIssueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskExtendedDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class CountTaskDTO : HoldingsTaskDTO {
        
        private System.DateTime adjApprDateField;
        
        private bool adjApprDateFieldSpecified;
        
        private string adjApprDetailField;
        
        private string adjApprStatField;
        
        private System.DateTime adjApprTimeField;
        
        private bool adjApprTimeFieldSpecified;
        
        private bool batchLotField;
        
        private bool batchLotFieldSpecified;
        
        private string binCodeField;
        
        private decimal consignedSOHField;
        
        private bool consignedSOHFieldSpecified;
        
        private string countErrorStatusField;
        
        private decimal countQtyField;
        
        private bool countQtyFieldSpecified;
        
        private string countSheetNumberField;
        
        private string countTaskStatusField;
        
        private decimal deficientAdjustmentQtyField;
        
        private bool deficientAdjustmentQtyFieldSpecified;
        
        private string discrepancyActionRequiredField;
        
        private string discrepancyCommentField;
        
        private bool discrepancyProcessedField;
        
        private bool discrepancyProcessedFieldSpecified;
        
        private string discrepancyReasonField;
        
        private string districtCodeField;
        
        private string employeeIdField;
        
        private decimal invPrice3DecField;
        
        private bool invPrice3DecFieldSpecified;
        
        private decimal inventoryCostPriceField;
        
        private bool inventoryCostPriceFieldSpecified;
        
        private bool isCountQtyEnabledField;
        
        private bool isCountQtyEnabledFieldSpecified;
        
        private decimal itemPriceField;
        
        private bool itemPriceFieldSpecified;
        
        private string mediumField;
        
        private decimal numberOfCountsField;
        
        private bool numberOfCountsFieldSpecified;
        
        private bool otherBinsExistField;
        
        private bool otherBinsExistFieldSpecified;
        
        private decimal ownedSOHField;
        
        private bool ownedSOHFieldSpecified;
        
        private string primaryBinField;
        
        private string printerCodeField;
        
        private string programmeField;
        
        private string programmeGroupField;
        
        private decimal qtyVarianceField;
        
        private bool qtyVarianceFieldSpecified;
        
        private System.DateTime reconcileDateField;
        
        private bool reconcileDateFieldSpecified;
        
        private bool shelfLifeField;
        
        private bool shelfLifeFieldSpecified;
        
        private bool stockAtBinField;
        
        private bool stockAtBinFieldSpecified;
        
        private decimal stockOnhandField;
        
        private bool stockOnhandFieldSpecified;
        
        private bool stockcdeerrswField;
        
        private bool stockcdeerrswFieldSpecified;
        
        private string stocktakeGroupField;
        
        private string stocktakeNumberField;
        
        private string stocktakeTypeField;
        
        private string supplyCustomerAccountIdField;
        
        private decimal surplusAdjustmentQtyField;
        
        private bool surplusAdjustmentQtyFieldSpecified;
        
        private string trackedField;
        
        private decimal valueOfConsignedStockField;
        
        private bool valueOfConsignedStockFieldSpecified;
        
        private decimal valueOfDeficientAdjustmentsField;
        
        private bool valueOfDeficientAdjustmentsFieldSpecified;
        
        private decimal valueOfOwnedStockField;
        
        private bool valueOfOwnedStockFieldSpecified;
        
        private decimal valueOfSurplusAdjustmentsField;
        
        private bool valueOfSurplusAdjustmentsFieldSpecified;
        
        private decimal valueVarianceField;
        
        private bool valueVarianceFieldSpecified;
        
        private string warehouseIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime adjApprDate {
            get {
                return this.adjApprDateField;
            }
            set {
                this.adjApprDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool adjApprDateSpecified {
            get {
                return this.adjApprDateFieldSpecified;
            }
            set {
                this.adjApprDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string adjApprDetail {
            get {
                return this.adjApprDetailField;
            }
            set {
                this.adjApprDetailField = value;
            }
        }
        
        /// <remarks/>
        public string adjApprStat {
            get {
                return this.adjApprStatField;
            }
            set {
                this.adjApprStatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="time")]
        public System.DateTime adjApprTime {
            get {
                return this.adjApprTimeField;
            }
            set {
                this.adjApprTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool adjApprTimeSpecified {
            get {
                return this.adjApprTimeFieldSpecified;
            }
            set {
                this.adjApprTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool batchLot {
            get {
                return this.batchLotField;
            }
            set {
                this.batchLotField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchLotSpecified {
            get {
                return this.batchLotFieldSpecified;
            }
            set {
                this.batchLotFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string binCode {
            get {
                return this.binCodeField;
            }
            set {
                this.binCodeField = value;
            }
        }
        
        /// <remarks/>
        public decimal consignedSOH {
            get {
                return this.consignedSOHField;
            }
            set {
                this.consignedSOHField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool consignedSOHSpecified {
            get {
                return this.consignedSOHFieldSpecified;
            }
            set {
                this.consignedSOHFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string countErrorStatus {
            get {
                return this.countErrorStatusField;
            }
            set {
                this.countErrorStatusField = value;
            }
        }
        
        /// <remarks/>
        public decimal countQty {
            get {
                return this.countQtyField;
            }
            set {
                this.countQtyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool countQtySpecified {
            get {
                return this.countQtyFieldSpecified;
            }
            set {
                this.countQtyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string countSheetNumber {
            get {
                return this.countSheetNumberField;
            }
            set {
                this.countSheetNumberField = value;
            }
        }
        
        /// <remarks/>
        public string countTaskStatus {
            get {
                return this.countTaskStatusField;
            }
            set {
                this.countTaskStatusField = value;
            }
        }
        
        /// <remarks/>
        public decimal deficientAdjustmentQty {
            get {
                return this.deficientAdjustmentQtyField;
            }
            set {
                this.deficientAdjustmentQtyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deficientAdjustmentQtySpecified {
            get {
                return this.deficientAdjustmentQtyFieldSpecified;
            }
            set {
                this.deficientAdjustmentQtyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string discrepancyActionRequired {
            get {
                return this.discrepancyActionRequiredField;
            }
            set {
                this.discrepancyActionRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string discrepancyComment {
            get {
                return this.discrepancyCommentField;
            }
            set {
                this.discrepancyCommentField = value;
            }
        }
        
        /// <remarks/>
        public bool discrepancyProcessed {
            get {
                return this.discrepancyProcessedField;
            }
            set {
                this.discrepancyProcessedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool discrepancyProcessedSpecified {
            get {
                return this.discrepancyProcessedFieldSpecified;
            }
            set {
                this.discrepancyProcessedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string discrepancyReason {
            get {
                return this.discrepancyReasonField;
            }
            set {
                this.discrepancyReasonField = value;
            }
        }
        
        /// <remarks/>
        public string districtCode {
            get {
                return this.districtCodeField;
            }
            set {
                this.districtCodeField = value;
            }
        }
        
        /// <remarks/>
        public string employeeId {
            get {
                return this.employeeIdField;
            }
            set {
                this.employeeIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal invPrice3Dec {
            get {
                return this.invPrice3DecField;
            }
            set {
                this.invPrice3DecField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool invPrice3DecSpecified {
            get {
                return this.invPrice3DecFieldSpecified;
            }
            set {
                this.invPrice3DecFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal inventoryCostPrice {
            get {
                return this.inventoryCostPriceField;
            }
            set {
                this.inventoryCostPriceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool inventoryCostPriceSpecified {
            get {
                return this.inventoryCostPriceFieldSpecified;
            }
            set {
                this.inventoryCostPriceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool isCountQtyEnabled {
            get {
                return this.isCountQtyEnabledField;
            }
            set {
                this.isCountQtyEnabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool isCountQtyEnabledSpecified {
            get {
                return this.isCountQtyEnabledFieldSpecified;
            }
            set {
                this.isCountQtyEnabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal itemPrice {
            get {
                return this.itemPriceField;
            }
            set {
                this.itemPriceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool itemPriceSpecified {
            get {
                return this.itemPriceFieldSpecified;
            }
            set {
                this.itemPriceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string medium {
            get {
                return this.mediumField;
            }
            set {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public decimal numberOfCounts {
            get {
                return this.numberOfCountsField;
            }
            set {
                this.numberOfCountsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberOfCountsSpecified {
            get {
                return this.numberOfCountsFieldSpecified;
            }
            set {
                this.numberOfCountsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool otherBinsExist {
            get {
                return this.otherBinsExistField;
            }
            set {
                this.otherBinsExistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool otherBinsExistSpecified {
            get {
                return this.otherBinsExistFieldSpecified;
            }
            set {
                this.otherBinsExistFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal ownedSOH {
            get {
                return this.ownedSOHField;
            }
            set {
                this.ownedSOHField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ownedSOHSpecified {
            get {
                return this.ownedSOHFieldSpecified;
            }
            set {
                this.ownedSOHFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string primaryBin {
            get {
                return this.primaryBinField;
            }
            set {
                this.primaryBinField = value;
            }
        }
        
        /// <remarks/>
        public string printerCode {
            get {
                return this.printerCodeField;
            }
            set {
                this.printerCodeField = value;
            }
        }
        
        /// <remarks/>
        public string programme {
            get {
                return this.programmeField;
            }
            set {
                this.programmeField = value;
            }
        }
        
        /// <remarks/>
        public string programmeGroup {
            get {
                return this.programmeGroupField;
            }
            set {
                this.programmeGroupField = value;
            }
        }
        
        /// <remarks/>
        public decimal qtyVariance {
            get {
                return this.qtyVarianceField;
            }
            set {
                this.qtyVarianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qtyVarianceSpecified {
            get {
                return this.qtyVarianceFieldSpecified;
            }
            set {
                this.qtyVarianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime reconcileDate {
            get {
                return this.reconcileDateField;
            }
            set {
                this.reconcileDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool reconcileDateSpecified {
            get {
                return this.reconcileDateFieldSpecified;
            }
            set {
                this.reconcileDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool shelfLife {
            get {
                return this.shelfLifeField;
            }
            set {
                this.shelfLifeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shelfLifeSpecified {
            get {
                return this.shelfLifeFieldSpecified;
            }
            set {
                this.shelfLifeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool stockAtBin {
            get {
                return this.stockAtBinField;
            }
            set {
                this.stockAtBinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stockAtBinSpecified {
            get {
                return this.stockAtBinFieldSpecified;
            }
            set {
                this.stockAtBinFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal stockOnhand {
            get {
                return this.stockOnhandField;
            }
            set {
                this.stockOnhandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stockOnhandSpecified {
            get {
                return this.stockOnhandFieldSpecified;
            }
            set {
                this.stockOnhandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool stockcdeerrsw {
            get {
                return this.stockcdeerrswField;
            }
            set {
                this.stockcdeerrswField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stockcdeerrswSpecified {
            get {
                return this.stockcdeerrswFieldSpecified;
            }
            set {
                this.stockcdeerrswFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string stocktakeGroup {
            get {
                return this.stocktakeGroupField;
            }
            set {
                this.stocktakeGroupField = value;
            }
        }
        
        /// <remarks/>
        public string stocktakeNumber {
            get {
                return this.stocktakeNumberField;
            }
            set {
                this.stocktakeNumberField = value;
            }
        }
        
        /// <remarks/>
        public string stocktakeType {
            get {
                return this.stocktakeTypeField;
            }
            set {
                this.stocktakeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string supplyCustomerAccountId {
            get {
                return this.supplyCustomerAccountIdField;
            }
            set {
                this.supplyCustomerAccountIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal surplusAdjustmentQty {
            get {
                return this.surplusAdjustmentQtyField;
            }
            set {
                this.surplusAdjustmentQtyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool surplusAdjustmentQtySpecified {
            get {
                return this.surplusAdjustmentQtyFieldSpecified;
            }
            set {
                this.surplusAdjustmentQtyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string tracked {
            get {
                return this.trackedField;
            }
            set {
                this.trackedField = value;
            }
        }
        
        /// <remarks/>
        public decimal valueOfConsignedStock {
            get {
                return this.valueOfConsignedStockField;
            }
            set {
                this.valueOfConsignedStockField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueOfConsignedStockSpecified {
            get {
                return this.valueOfConsignedStockFieldSpecified;
            }
            set {
                this.valueOfConsignedStockFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal valueOfDeficientAdjustments {
            get {
                return this.valueOfDeficientAdjustmentsField;
            }
            set {
                this.valueOfDeficientAdjustmentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueOfDeficientAdjustmentsSpecified {
            get {
                return this.valueOfDeficientAdjustmentsFieldSpecified;
            }
            set {
                this.valueOfDeficientAdjustmentsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal valueOfOwnedStock {
            get {
                return this.valueOfOwnedStockField;
            }
            set {
                this.valueOfOwnedStockField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueOfOwnedStockSpecified {
            get {
                return this.valueOfOwnedStockFieldSpecified;
            }
            set {
                this.valueOfOwnedStockFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal valueOfSurplusAdjustments {
            get {
                return this.valueOfSurplusAdjustmentsField;
            }
            set {
                this.valueOfSurplusAdjustmentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueOfSurplusAdjustmentsSpecified {
            get {
                return this.valueOfSurplusAdjustmentsFieldSpecified;
            }
            set {
                this.valueOfSurplusAdjustmentsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public decimal valueVariance {
            get {
                return this.valueVarianceField;
            }
            set {
                this.valueVarianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueVarianceSpecified {
            get {
                return this.valueVarianceFieldSpecified;
            }
            set {
                this.valueVarianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string warehouseId {
            get {
                return this.warehouseIdField;
            }
            set {
                this.warehouseIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskExtendedDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class HoldingsTaskDTO : ServiceDTO {
        
        private System.DateTime assignedDateField;
        
        private bool assignedDateFieldSpecified;
        
        private System.DateTime assignedTimeField;
        
        private bool assignedTimeFieldSpecified;
        
        private string assignedToField;
        
        private string closureCodeField;
        
        private string closureCommentField;
        
        private System.DateTime creationDateField;
        
        private bool creationDateFieldSpecified;
        
        private System.DateTime creationTimeField;
        
        private bool creationTimeFieldSpecified;
        
        private string creationUserField;
        
        private string custodianIdField;
        
        private string holdingTaskTypeField;
        
        private string priorityCodeField;
        
        private string sourceTaskIdField;
        
        private string stockCodeField;
        
        private string taskIdField;
        
        private bool underCountFlagField;
        
        private bool underCountFlagFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime assignedDate {
            get {
                return this.assignedDateField;
            }
            set {
                this.assignedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool assignedDateSpecified {
            get {
                return this.assignedDateFieldSpecified;
            }
            set {
                this.assignedDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="time")]
        public System.DateTime assignedTime {
            get {
                return this.assignedTimeField;
            }
            set {
                this.assignedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool assignedTimeSpecified {
            get {
                return this.assignedTimeFieldSpecified;
            }
            set {
                this.assignedTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string assignedTo {
            get {
                return this.assignedToField;
            }
            set {
                this.assignedToField = value;
            }
        }
        
        /// <remarks/>
        public string closureCode {
            get {
                return this.closureCodeField;
            }
            set {
                this.closureCodeField = value;
            }
        }
        
        /// <remarks/>
        public string closureComment {
            get {
                return this.closureCommentField;
            }
            set {
                this.closureCommentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime creationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool creationDateSpecified {
            get {
                return this.creationDateFieldSpecified;
            }
            set {
                this.creationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="time")]
        public System.DateTime creationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool creationTimeSpecified {
            get {
                return this.creationTimeFieldSpecified;
            }
            set {
                this.creationTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string creationUser {
            get {
                return this.creationUserField;
            }
            set {
                this.creationUserField = value;
            }
        }
        
        /// <remarks/>
        public string custodianId {
            get {
                return this.custodianIdField;
            }
            set {
                this.custodianIdField = value;
            }
        }
        
        /// <remarks/>
        public string holdingTaskType {
            get {
                return this.holdingTaskTypeField;
            }
            set {
                this.holdingTaskTypeField = value;
            }
        }
        
        /// <remarks/>
        public string priorityCode {
            get {
                return this.priorityCodeField;
            }
            set {
                this.priorityCodeField = value;
            }
        }
        
        /// <remarks/>
        public string sourceTaskId {
            get {
                return this.sourceTaskIdField;
            }
            set {
                this.sourceTaskIdField = value;
            }
        }
        
        /// <remarks/>
        public string stockCode {
            get {
                return this.stockCodeField;
            }
            set {
                this.stockCodeField = value;
            }
        }
        
        /// <remarks/>
        public string taskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public bool underCountFlag {
            get {
                return this.underCountFlagField;
            }
            set {
                this.underCountFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool underCountFlagSpecified {
            get {
                return this.underCountFlagFieldSpecified;
            }
            set {
                this.underCountFlagFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSearchParam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskSearchParam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockUnderCountDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HoldingsTaskDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskExtendedDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.ellipse.mincom.com")]
    public abstract partial class ServiceDTO : Base {
        
        private Attribute[] customAttributesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://attribute.ellipse.mincom.com")]
        public Attribute[] customAttributes {
            get {
                return this.customAttributesField;
            }
            set {
                this.customAttributesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://attribute.ellipse.mincom.com")]
    public partial class Attribute {
        
        private string dataTypeField;
        
        private string nameField;
        
        private string namespaceField;
        
        private anyType2anyTypeMapEntry[] propertiesField;
        
        private string valueField;
        
        /// <remarks/>
        public string dataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string @namespace {
            get {
                return this.namespaceField;
            }
            set {
                this.namespaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("entry", Namespace="http://counttask.m3140.service.ellipse.mincom.com", IsNullable=false)]
        public anyType2anyTypeMapEntry[] properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://counttask.m3140.service.ellipse.mincom.com")]
    public partial class anyType2anyTypeMapEntry {
        
        private object keyField;
        
        private object valueField;
        
        /// <remarks/>
        public object key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public object value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSearchParam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskSearchParam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockUnderCountDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HoldingsTaskDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskExtendedDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.base.types.ellipse.mincom.com")]
    public abstract partial class Base {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CountTaskSearchParam))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.ellipse.mincom.com")]
    public abstract partial class AbstractSearchParam : ServiceDTO {
        
        private ServiceRequiredAttributes serviceRequiredAttributesField;
        
        /// <remarks/>
        public ServiceRequiredAttributes serviceRequiredAttributes {
            get {
                return this.serviceRequiredAttributesField;
            }
            set {
                this.serviceRequiredAttributesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class CountTaskSearchParam : AbstractSearchParam {
        
        private string assignToField;
        
        private string binCodeField;
        
        private string countSheetNumberField;
        
        private string countTaskStatusField;
        
        private string custodianIdField;
        
        private string districtCodeField;
        
        private string employeeIdField;
        
        private string stockCodeField;
        
        private string stocktakeNumberField;
        
        private string stocktakeTypeField;
        
        private string supplyCustomerAccountIdField;
        
        private string warehouseIdField;
        
        /// <remarks/>
        public string assignTo {
            get {
                return this.assignToField;
            }
            set {
                this.assignToField = value;
            }
        }
        
        /// <remarks/>
        public string binCode {
            get {
                return this.binCodeField;
            }
            set {
                this.binCodeField = value;
            }
        }
        
        /// <remarks/>
        public string countSheetNumber {
            get {
                return this.countSheetNumberField;
            }
            set {
                this.countSheetNumberField = value;
            }
        }
        
        /// <remarks/>
        public string countTaskStatus {
            get {
                return this.countTaskStatusField;
            }
            set {
                this.countTaskStatusField = value;
            }
        }
        
        /// <remarks/>
        public string custodianId {
            get {
                return this.custodianIdField;
            }
            set {
                this.custodianIdField = value;
            }
        }
        
        /// <remarks/>
        public string districtCode {
            get {
                return this.districtCodeField;
            }
            set {
                this.districtCodeField = value;
            }
        }
        
        /// <remarks/>
        public string employeeId {
            get {
                return this.employeeIdField;
            }
            set {
                this.employeeIdField = value;
            }
        }
        
        /// <remarks/>
        public string stockCode {
            get {
                return this.stockCodeField;
            }
            set {
                this.stockCodeField = value;
            }
        }
        
        /// <remarks/>
        public string stocktakeNumber {
            get {
                return this.stocktakeNumberField;
            }
            set {
                this.stocktakeNumberField = value;
            }
        }
        
        /// <remarks/>
        public string stocktakeType {
            get {
                return this.stocktakeTypeField;
            }
            set {
                this.stocktakeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string supplyCustomerAccountId {
            get {
                return this.supplyCustomerAccountIdField;
            }
            set {
                this.supplyCustomerAccountIdField = value;
            }
        }
        
        /// <remarks/>
        public string warehouseId {
            get {
                return this.warehouseIdField;
            }
            set {
                this.warehouseIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class StockUnderCountDTO : ServiceDTO {
        
        private string custodianIdField;
        
        private string stockCodeField;
        
        private bool stockUnderCountFlagField;
        
        private bool stockUnderCountFlagFieldSpecified;
        
        /// <remarks/>
        public string custodianId {
            get {
                return this.custodianIdField;
            }
            set {
                this.custodianIdField = value;
            }
        }
        
        /// <remarks/>
        public string stockCode {
            get {
                return this.stockCodeField;
            }
            set {
                this.stockCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool stockUnderCountFlag {
            get {
                return this.stockUnderCountFlagField;
            }
            set {
                this.stockUnderCountFlagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stockUnderCountFlagSpecified {
            get {
                return this.stockUnderCountFlagFieldSpecified;
            }
            set {
                this.stockUnderCountFlagFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class StockUnderCountServiceResult : ServiceResult {
        
        private StockUnderCountDTO stockUnderCountDTOField;
        
        /// <remarks/>
        public StockUnderCountDTO stockUnderCountDTO {
            get {
                return this.stockUnderCountDTOField;
            }
            set {
                this.stockUnderCountDTOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://instances.m3140.types.ellipse.mincom.com")]
    public partial class CountTaskServiceResult : ServiceResult {
        
        private CountTaskDTO countTaskDTOField;
        
        /// <remarks/>
        public CountTaskDTO countTaskDTO {
            get {
                return this.countTaskDTOField;
            }
            set {
                this.countTaskDTOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void searchForCountedCompletedEventHandler(object sender, searchForCountedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchForCountedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchForCountedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleGetStockUnderCountFlagCompletedEventHandler(object sender, multipleGetStockUnderCountFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleGetStockUnderCountFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleGetStockUnderCountFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StockUnderCountServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StockUnderCountServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void setAllConfirmedCompletedEventHandler(object sender, setAllConfirmedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setAllConfirmedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setAllConfirmedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleDeleteCompletedEventHandler(object sender, multipleDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void notCountedCompletedEventHandler(object sender, notCountedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class notCountedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal notCountedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateCompletedEventHandler(object sender, updateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deleteCompletedEventHandler(object sender, deleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleFinaliseCompletedEventHandler(object sender, multipleFinaliseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleFinaliseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleFinaliseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleSetAllConfirmedCompletedEventHandler(object sender, multipleSetAllConfirmedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleSetAllConfirmedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleSetAllConfirmedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void searchForUncountedInWarehouseCompletedEventHandler(object sender, searchForUncountedInWarehouseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchForUncountedInWarehouseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchForUncountedInWarehouseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskExtendedServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskExtendedServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void searchCompletedEventHandler(object sender, searchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multiplePrintCompletedEventHandler(object sender, multiplePrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multiplePrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multiplePrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleUpdateCompletedEventHandler(object sender, multipleUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void raiseDiscrepancyCompletedEventHandler(object sender, raiseDiscrepancyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class raiseDiscrepancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal raiseDiscrepancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleRaiseDiscrepancyCompletedEventHandler(object sender, multipleRaiseDiscrepancyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleRaiseDiscrepancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleRaiseDiscrepancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void createCompletedEventHandler(object sender, createCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleNotCountedCompletedEventHandler(object sender, multipleNotCountedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleNotCountedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleNotCountedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void finaliseCompletedEventHandler(object sender, finaliseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class finaliseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal finaliseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleAssignCompletedEventHandler(object sender, multipleAssignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleAssignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleAssignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void readCompletedEventHandler(object sender, readCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class readCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal readCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void reconcileCompletedEventHandler(object sender, reconcileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reconcileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reconcileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void printCompletedEventHandler(object sender, printCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class printCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal printCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void transferCompletedEventHandler(object sender, transferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class transferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal transferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleReconcileCompletedEventHandler(object sender, multipleReconcileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleReconcileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleReconcileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleTransferCompletedEventHandler(object sender, multipleTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getStockUnderCountFlagCompletedEventHandler(object sender, getStockUnderCountFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStockUnderCountFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStockUnderCountFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StockUnderCountServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StockUnderCountServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleReadCompletedEventHandler(object sender, multipleReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void recountCompletedEventHandler(object sender, recountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void searchForUncountedCompletedEventHandler(object sender, searchForUncountedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchForUncountedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchForUncountedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleCreateCompletedEventHandler(object sender, multipleCreateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void assignCompletedEventHandler(object sender, assignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void multipleRecountCompletedEventHandler(object sender, multipleRecountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class multipleRecountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal multipleRecountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountTaskServiceResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountTaskServiceResult[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591